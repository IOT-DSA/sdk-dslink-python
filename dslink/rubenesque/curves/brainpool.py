# pylint: disable=line-too-long
#
# Copyright (c) 2015, Red Hat, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from .weierstrass import Point


class brainpoolP160r1(Point):
    """
    >>> from . import find
    >>> cls = find("brainpoolP160r1")
    >>> find("1.3.36.3.3.2.8.1.1.1")
    <class 'rubenesque.curves.brainpool.brainpoolP160r1'>

    Test basic math:
    >>> cls().is_identity
    True
    >>> (-cls()).is_identity
    True
    >>> cls().is_valid
    False
    >>> (cls.generator() * 0).is_identity
    True
    >>> cls.generator() * 1 == cls.generator()
    True
    >>> cls.generator() + cls.generator() * 0 == cls.generator()
    True
    >>> cls.generator() + cls.generator() == cls.generator() * 2
    True
    >>> cls.generator() * 2 + cls.generator() == cls.generator() * 3
    True
    >>> cls.generator() * 2 - cls.generator() == cls.generator()
    True
    >>> cls.generator() * 6 / 3 == cls.generator() * 2
    True

    The following test values are from https://tools.ietf.org/html/draft-merkle-ikev2-ke-brainpool-00
    >>> a = brainpoolP160r1.generator() * 0x8BF7BC5CBE8AC8B34940C2C5652D6AE4EC9F53CE
    >>> a
    brainpoolP160r1(651DA24C7FF64DD863F8F650E53F07B8EC943C39, D1C68C656E44034D0DAD60A1589FD49594E7C2A4)
    >>> b = brainpoolP160r1.generator() * 0xB6F7160F0DE61CCEAAC528A32BD7AD942E8017B2
    >>> b
    brainpoolP160r1(DF9F259AEA6DFA1F28B16B8FEC52044CC1DFBA35, DF72AEA65A5E3EF69166DA161ABE00FC9C81C4D0)
    >>> a * 0xB6F7160F0DE61CCEAAC528A32BD7AD942E8017B2
    brainpoolP160r1(D78792AC4CBE3390DDD6557060066BC25579CA97, 3A3DAB50421585FB9DE9D87BB3BBBAFE3379A571)
    >>> b * 0x8BF7BC5CBE8AC8B34940C2C5652D6AE4EC9F53CE
    brainpoolP160r1(D78792AC4CBE3390DDD6557060066BC25579CA97, 3A3DAB50421585FB9DE9D87BB3BBBAFE3379A571)
    """

    a = 0x340E7BE2A280EB74E2BE61BADA745D97E8F7C300
    b = 0x1E589A8595423412134FAA2DBDEC95C8D8675E58
    order = 0xE95E4A5F737059DC60DF5991D45029409E60FC09
    prime = 0xE95E4A5F737059DC60DFC7AD95B3D8139515620F
    aliases = ("1.3.36.3.3.2.8.1.1.1", )

    @classmethod
    def generator(cls):
        return cls(
            0xBED5AF16EA3F6A4F62938C4631EB5AF7BDBCDBC3,
            0x1667CB477A1A8EC338F94741669C976316DA6321
        )


class brainpoolP192r1(Point):
    """
    >>> from . import find
    >>> cls = find("brainpoolP192r1")
    >>> find("1.3.36.3.3.2.8.1.1.3")
    <class 'rubenesque.curves.brainpool.brainpoolP192r1'>

    Test basic math:
    >>> cls().is_identity
    True
    >>> (-cls()).is_identity
    True
    >>> cls().is_valid
    False
    >>> (cls.generator() * 0).is_identity
    True
    >>> cls.generator() * 1 == cls.generator()
    True
    >>> cls.generator() + cls.generator() * 0 == cls.generator()
    True
    >>> cls.generator() + cls.generator() == cls.generator() * 2
    True
    >>> cls.generator() * 2 + cls.generator() == cls.generator() * 3
    True
    >>> cls.generator() * 2 - cls.generator() == cls.generator()
    True
    >>> cls.generator() * 6 / 3 == cls.generator() * 2
    True

    The following test values are from https://tools.ietf.org/html/draft-merkle-ikev2-ke-brainpool-00
    >>> a = brainpoolP192r1.generator() * 0x4B32E699290E3F052A99C7F0CFFD1C5707898015C743FE2A
    >>> a
    brainpoolP192r1(31DB86048351629CFCA68541D65D909A0F1DC8E77AC440B2, 7FB2925E1FDC609CF2252F0469836BA4F216ADF8A812893D)
    >>> b = brainpoolP192r1.generator() * 0x6916B2A336B3305A256238EA2BAB549D9C893F47D07964B8
    >>> b
    brainpoolP192r1(15B795C67C5E47510116B0DE419C45835C209AE77D971536, 0D1ADD9881EF6115EDF5B5CEF854B42E435CD9260A5719FB)
    >>> a * 0x6916B2A336B3305A256238EA2BAB549D9C893F47D07964B8
    brainpoolP192r1(B946A6914877922A40F6D588D47FC7D44691C346FD384570, AAD4E9CBC5BB6C7C308A95F445287580A09EBC93624FB24E)
    >>> b * 0x4B32E699290E3F052A99C7F0CFFD1C5707898015C743FE2A
    brainpoolP192r1(B946A6914877922A40F6D588D47FC7D44691C346FD384570, AAD4E9CBC5BB6C7C308A95F445287580A09EBC93624FB24E)
    """

    a = 0x6A91174076B1E0E19C39C031FE8685C1CAE040E5C69A28EF
    b = 0x469A28EF7C28CCA3DC721D044F4496BCCA7EF4146FBF25C9
    order = 0xC302F41D932A36CDA7A3462F9E9E916B5BE8F1029AC4ACC1
    prime = 0xC302F41D932A36CDA7A3463093D18DB78FCE476DE1A86297
    aliases = ("1.3.36.3.3.2.8.1.1.3", )

    @classmethod
    def generator(cls):
        return cls(
            0xC0A0647EAAB6A48753B033C56CB0F0900A2F5C4853375FD6,
            0x14B690866ABD5BB88B5F4828C1490002E6773FA2FA299B8F
        )


class brainpoolP224r1(Point):
    """
    >>> from . import find
    >>> cls = find("brainpoolP224r1")
    >>> find("1.3.36.3.3.2.8.1.1.5")
    <class 'rubenesque.curves.brainpool.brainpoolP224r1'>

    Test basic math:
    >>> cls().is_identity
    True
    >>> (-cls()).is_identity
    True
    >>> cls().is_valid
    False
    >>> (cls.generator() * 0).is_identity
    True
    >>> cls.generator() * 1 == cls.generator()
    True
    >>> cls.generator() + cls.generator() * 0 == cls.generator()
    True
    >>> cls.generator() + cls.generator() == cls.generator() * 2
    True
    >>> cls.generator() * 2 + cls.generator() == cls.generator() * 3
    True
    >>> cls.generator() * 2 - cls.generator() == cls.generator()
    True
    >>> cls.generator() * 6 / 3 == cls.generator() * 2
    True

    The following test values are from https://tools.ietf.org/html/rfc6954
    >>> a = brainpoolP224r1.generator() * 0x39F155483CEE191FBECFE9C81D8AB1A03CDA6790E7184ACE44BCA161
    >>> a
    brainpoolP224r1(A9C21A569759DA95E0387041184261440327AFE33141CA04B82DC92E, 98A0F75FBBF61D8E58AE5511B2BCDBE8E549B31E37069A2825F590C1)
    >>> b = brainpoolP224r1.generator() * 0x6060552303899E2140715816C45B57D9B42204FB6A5BF5BEAC10DB00
    >>> b
    brainpoolP224r1(034A56C550FF88056144E6DD56070F54B0135976B5BF77827313F36B, 75165AD99347DC86CAAB1CBB579E198EAF88DC35F927B358AA683681)
    >>> a * 0x6060552303899E2140715816C45B57D9B42204FB6A5BF5BEAC10DB00
    brainpoolP224r1(1A4BFE705445120C8E3E026699054104510D119757B74D5FE2462C66, BB6802AC01F8B7E91B1A1ACFB9830A95C079CEC48E52805DFD7D2AFE)
    >>> b * 0x39F155483CEE191FBECFE9C81D8AB1A03CDA6790E7184ACE44BCA161
    brainpoolP224r1(1A4BFE705445120C8E3E026699054104510D119757B74D5FE2462C66, BB6802AC01F8B7E91B1A1ACFB9830A95C079CEC48E52805DFD7D2AFE)
    """

    a = 0x68A5E62CA9CE6C1C299803A6C1530B514E182AD8B0042A59CAD29F43
    b = 0x2580F63CCFE44138870713B1A92369E33E2135D266DBB372386C400B
    order = 0xD7C134AA264366862A18302575D0FB98D116BC4B6DDEBCA3A5A7939F
    prime = 0xD7C134AA264366862A18302575D1D787B09F075797DA89F57EC8C0FF
    aliases = ("1.3.36.3.3.2.8.1.1.5", )

    @classmethod
    def generator(cls):
        return cls(
            0x0D9029AD2C7E5CF4340823B2A87DC68C9E4CE3174C1E6EFDEE12C07D,
            0x58AA56F772C0726F24C6B89E4ECDAC24354B9E99CAA3F6D3761402CD
        )


class brainpoolP256r1(Point):
    """
    >>> from . import find
    >>> cls = find("brainpoolP256r1")
    >>> find("1.3.36.3.3.2.8.1.1.7")
    <class 'rubenesque.curves.brainpool.brainpoolP256r1'>

    Test basic math:
    >>> cls().is_identity
    True
    >>> (-cls()).is_identity
    True
    >>> cls().is_valid
    False
    >>> (cls.generator() * 0).is_identity
    True
    >>> cls.generator() * 1 == cls.generator()
    True
    >>> cls.generator() + cls.generator() * 0 == cls.generator()
    True
    >>> cls.generator() + cls.generator() == cls.generator() * 2
    True
    >>> cls.generator() * 2 + cls.generator() == cls.generator() * 3
    True
    >>> cls.generator() * 2 - cls.generator() == cls.generator()
    True
    >>> cls.generator() * 6 / 3 == cls.generator() * 2
    True

    The following test values are from https://tools.ietf.org/html/rfc6954
    >>> a = brainpoolP256r1.generator() * 0x81DB1EE100150FF2EA338D708271BE38300CB54241D79950F77B063039804F1D
    >>> a
    brainpoolP256r1(44106E913F92BC02A1705D9953A8414DB95E1AAA49E81D9E85F929A8E3100BE5, 8AB4846F11CACCB73CE49CBDD120F5A900A69FD32C272223F789EF10EB089BDC)
    >>> b = brainpoolP256r1.generator() * 0x55E40BC41E37E3E2AD25C3C6654511FFA8474A91A0032087593852D3E7D76BD3
    >>> b
    brainpoolP256r1(8D2D688C6CF93E1160AD04CC4429117DC2C41825E1E9FCA0ADDD34E6F1B39F7B, 990C57520812BE512641E47034832106BC7D3E8DD0E4C7F1136D7006547CEC6A)
    >>> a * 0x55E40BC41E37E3E2AD25C3C6654511FFA8474A91A0032087593852D3E7D76BD3
    brainpoolP256r1(89AFC39D41D3B327814B80940B042590F96556EC91E6AE7939BCE31F3A18BF2B, 49C27868F4ECA2179BFD7D59B1E3BF34C1DBDE61AE12931648F43E59632504DE)
    >>> b * 0x81DB1EE100150FF2EA338D708271BE38300CB54241D79950F77B063039804F1D
    brainpoolP256r1(89AFC39D41D3B327814B80940B042590F96556EC91E6AE7939BCE31F3A18BF2B, 49C27868F4ECA2179BFD7D59B1E3BF34C1DBDE61AE12931648F43E59632504DE)
    """

    a = 0x7D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9
    b = 0x26DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B6
    order = 0xA9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A7
    prime = 0xA9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E5377
    aliases = ("1.3.36.3.3.2.8.1.1.7", )

    @classmethod
    def generator(cls):
        return cls(
            0x8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262,
            0x547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997
        )


class brainpoolP320r1(Point):
    """
    >>> from . import find
    >>> cls = find("brainpoolP320r1")
    >>> find("1.3.36.3.3.2.8.1.1.9")
    <class 'rubenesque.curves.brainpool.brainpoolP320r1'>

    Test basic math:
    >>> cls().is_identity
    True
    >>> (-cls()).is_identity
    True
    >>> cls().is_valid
    False
    >>> (cls.generator() * 0).is_identity
    True
    >>> cls.generator() * 1 == cls.generator()
    True
    >>> cls.generator() + cls.generator() * 0 == cls.generator()
    True
    >>> cls.generator() + cls.generator() == cls.generator() * 2
    True
    >>> cls.generator() * 2 + cls.generator() == cls.generator() * 3
    True
    >>> cls.generator() * 2 - cls.generator() == cls.generator()
    True
    >>> cls.generator() * 6 / 3 == cls.generator() * 2
    True

    The following test values are from https://tools.ietf.org/html/draft-merkle-ikev2-ke-brainpool-00
    >>> a = brainpoolP320r1.generator() * 0x7CD9C454BA907F7617E262A7FD73764C4A3157C13F82279EF9F062BE5D49A8E390B66A4DCEDFA867
    >>> a
    brainpoolP320r1(BC43666C00E4B943FE1C785DD8AA842A42AB54B0B49819F960F77694193CD3AFA71B6B3C826C7734, 69E998892C0764468023C8E3A7B8F219A1446042BE175D4476B2FDFD85B22EAD2F29101A1242A578)
    >>> b = brainpoolP320r1.generator() * 0xB832A73DA5F671E80D87F09372544801F6812224B19A4BC1B37AA7DB0842E6DD3CA11DE0F802BFED
    >>> b
    brainpoolP320r1(B1246229429354D1D687BCA48BCCD6FC733B146DAC03642A0AD4B896F5D8BCBD2F4BCA16776E4526, A41683898F9A76EF36EA2DC7B74D419E55CF3664721890D6A2B2FB8CEB7C113167ED137A358EE37F)
    >>> a * 0xB832A73DA5F671E80D87F09372544801F6812224B19A4BC1B37AA7DB0842E6DD3CA11DE0F802BFED
    brainpoolP320r1(730314D906B2F21DC11BE05031B028D665696BEEC7139328CDF70C718BE5D208659BB96743A88067, C338B5B7A3FB62EDE9BAA9C06DF9BC36D4B5F0D35EFDF79249913E6DC4DB6DBC7BA9B74E59C840F1)
    >>> b * 0x7CD9C454BA907F7617E262A7FD73764C4A3157C13F82279EF9F062BE5D49A8E390B66A4DCEDFA867
    brainpoolP320r1(730314D906B2F21DC11BE05031B028D665696BEEC7139328CDF70C718BE5D208659BB96743A88067, C338B5B7A3FB62EDE9BAA9C06DF9BC36D4B5F0D35EFDF79249913E6DC4DB6DBC7BA9B74E59C840F1)
    """

    a = 0x3EE30B568FBAB0F883CCEBD46D3F3BB8A2A73513F5EB79DA66190EB085FFA9F492F375A97D860EB4
    b = 0x520883949DFDBC42D3AD198640688A6FE13F41349554B49ACC31DCCD884539816F5EB4AC8FB1F1A6
    order = 0xD35E472036BC4FB7E13C785ED201E065F98FCFA5B68F12A32D482EC7EE8658E98691555B44C59311
    prime = 0xD35E472036BC4FB7E13C785ED201E065F98FCFA6F6F40DEF4F92B9EC7893EC28FCD412B1F1B32E27
    aliases = ("1.3.36.3.3.2.8.1.1.9", )

    @classmethod
    def generator(cls):
        return cls(
            0x43BD7E9AFB53D8B85289BCC48EE5BFE6F20137D10A087EB6E7871E2A10A599C710AF8D0D39E20611,
            0x14FDD05545EC1CC8AB4093247F77275E0743FFED117182EAA9C77877AAAC6AC7D35245D1692E8EE1
        )


class brainpoolP384r1(Point):
    """
    >>> from . import find
    >>> cls = find("brainpoolP384r1")
    >>> find("1.3.36.3.3.2.8.1.1.11")
    <class 'rubenesque.curves.brainpool.brainpoolP384r1'>

    Test basic math:
    >>> cls().is_identity
    True
    >>> (-cls()).is_identity
    True
    >>> cls().is_valid
    False
    >>> (cls.generator() * 0).is_identity
    True
    >>> cls.generator() * 1 == cls.generator()
    True
    >>> cls.generator() + cls.generator() * 0 == cls.generator()
    True
    >>> cls.generator() + cls.generator() == cls.generator() * 2
    True
    >>> cls.generator() * 2 + cls.generator() == cls.generator() * 3
    True
    >>> cls.generator() * 2 - cls.generator() == cls.generator()
    True
    >>> cls.generator() * 6 / 3 == cls.generator() * 2
    True

    The following test values are from https://tools.ietf.org/html/rfc6954
    >>> a = brainpoolP384r1.generator() * 0x1E20F5E048A5886F1F157C74E91BDE2B98C8B52D58E5003D57053FC4B0BD65D6F15EB5D1EE1610DF870795143627D042
    >>> a
    brainpoolP384r1(68B665DD91C195800650CDD363C625F4E742E8134667B767B1B476793588F885AB698C852D4A6E77A252D6380FCAF068, 55BC91A39C9EC01DEE36017B7D673A931236D2F1F5C83942D049E3FA20607493E0D038FF2FD30C2AB67D15C85F7FAA59)
    >>> b = brainpoolP384r1.generator() * 0x032640BC6003C59260F7250C3DB58CE647F98E1260ACCE4ACDA3DD869F74E01F8BA5E0324309DB6A9831497ABAC96670
    >>> b
    brainpoolP384r1(4D44326F269A597A5B58BBA565DA5556ED7FD9A8A9EB76C25F46DB69D19DC8CE6AD18E404B15738B2086DF37E71D1EB4, 62D692136DE56CBE93BF5FA3188EF58BC8A3A0EC6C1E151A21038A42E9185329B5B275903D192F8D4E1F32FE9CC78C48)
    >>> a * 0x032640BC6003C59260F7250C3DB58CE647F98E1260ACCE4ACDA3DD869F74E01F8BA5E0324309DB6A9831497ABAC96670
    brainpoolP384r1(0BD9D3A7EA0B3D519D09D8E48D0785FB744A6B355E6304BC51C229FBBCE239BBADF6403715C35D4FB2A5444F575D4F42, 0DF213417EBE4D8E40A5F76F66C56470C489A3478D146DECF6DF0D94BAE9E598157290F8756066975F1DB34B2324B7BD)
    >>> b * 0x1E20F5E048A5886F1F157C74E91BDE2B98C8B52D58E5003D57053FC4B0BD65D6F15EB5D1EE1610DF870795143627D042
    brainpoolP384r1(0BD9D3A7EA0B3D519D09D8E48D0785FB744A6B355E6304BC51C229FBBCE239BBADF6403715C35D4FB2A5444F575D4F42, 0DF213417EBE4D8E40A5F76F66C56470C489A3478D146DECF6DF0D94BAE9E598157290F8756066975F1DB34B2324B7BD)
    """

    a = 0x7BC382C63D8C150C3C72080ACE05AFA0C2BEA28E4FB22787139165EFBA91F90F8AA5814A503AD4EB04A8C7DD22CE2826
    b = 0x04A8C7DD22CE28268B39B55416F0447C2FB77DE107DCD2A62E880EA53EEB62D57CB4390295DBC9943AB78696FA504C11
    order = 0x8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B31F166E6CAC0425A7CF3AB6AF6B7FC3103B883202E9046565
    prime = 0x8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B412B1DA197FB71123ACD3A729901D1A71874700133107EC53
    aliases = ("1.3.36.3.3.2.8.1.1.11", )

    @classmethod
    def generator(cls):
        return cls(
            0x1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10E8E826E03436D646AAEF87B2E247D4AF1E,
            0x8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129280E4646217791811142820341263C5315
        )


class brainpoolP512r1(Point):
    """
    >>> from . import find
    >>> cls = find("brainpoolP512r1")
    >>> find("1.3.36.3.3.2.8.1.1.13")
    <class 'rubenesque.curves.brainpool.brainpoolP512r1'>

    Test basic math:
    >>> cls().is_identity
    True
    >>> (-cls()).is_identity
    True
    >>> cls().is_valid
    False
    >>> (cls.generator() * 0).is_identity
    True
    >>> cls.generator() * 1 == cls.generator()
    True
    >>> cls.generator() + cls.generator() * 0 == cls.generator()
    True
    >>> cls.generator() + cls.generator() == cls.generator() * 2
    True
    >>> cls.generator() * 2 + cls.generator() == cls.generator() * 3
    True
    >>> cls.generator() * 2 - cls.generator() == cls.generator()
    True
    >>> cls.generator() * 6 / 3 == cls.generator() * 2
    True

    The following test values are from https://tools.ietf.org/html/rfc6954
    >>> a = brainpoolP512r1.generator() * 0x16302FF0DBBB5A8D733DAB7141C1B45ACBC8715939677F6A56850A38BD87BD59B09E80279609FF333EB9D4C061231FB26F92EEB04982A5F1D1764CAD57665422
    >>> a
    brainpoolP512r1(0A420517E406AAC0ACDCE90FCD71487718D3B953EFD7FBEC5F7F27E28C6149999397E91E029E06457DB2D3E640668B392C2A7E737A7F0BF04436D11640FD09FD, 72E6882E8DB28AAD36237CD25D580DB23783961C8DC52DFA2EC138AD472A0FCEF3887CF62B623B2A87DE5C588301EA3E5FC269B373B60724F5E82A6AD147FDE7)
    >>> b = brainpoolP512r1.generator() * 0x230E18E1BCC88A362FA54E4EA3902009292F7F8033624FD471B5D8ACE49D12CFABBC19963DAB8E2F1EBA00BFFB29E4D72D13F2224562F405CB80503666B25429
    >>> b
    brainpoolP512r1(9D45F66DE5D67E2E6DB6E93A59CE0BB48106097FF78A081DE781CDB31FCE8CCBAAEA8DD4320C4119F1E9CD437A2EAB3731FA9668AB268D871DEDA55A5473199F, 2FDC313095BCDD5FB3A91636F07A959C8E86B5636A1E930E8396049CB481961D365CC11453A06C719835475B12CB52FC3C383BCE35E27EF194512B71876285FA)
    >>> a * 0x230E18E1BCC88A362FA54E4EA3902009292F7F8033624FD471B5D8ACE49D12CFABBC19963DAB8E2F1EBA00BFFB29E4D72D13F2224562F405CB80503666B25429
    brainpoolP512r1(A7927098655F1F9976FA50A9D566865DC530331846381C87256BAF3226244B76D36403C024D7BBF0AA0803EAFF405D3D24F11A9B5C0BEF679FE1454B21C4CD1F, 7DB71C3DEF63212841C463E881BDCF055523BD368240E6C3143BD8DEF8B3B3223B95E0F53082FF5E412F4222537A43DF1C6D25729DDB51620A832BE6A26680A2)
    >>> b * 0x16302FF0DBBB5A8D733DAB7141C1B45ACBC8715939677F6A56850A38BD87BD59B09E80279609FF333EB9D4C061231FB26F92EEB04982A5F1D1764CAD57665422
    brainpoolP512r1(A7927098655F1F9976FA50A9D566865DC530331846381C87256BAF3226244B76D36403C024D7BBF0AA0803EAFF405D3D24F11A9B5C0BEF679FE1454B21C4CD1F, 7DB71C3DEF63212841C463E881BDCF055523BD368240E6C3143BD8DEF8B3B3223B95E0F53082FF5E412F4222537A43DF1C6D25729DDB51620A832BE6A26680A2)
    """

    a = 0x7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA
    b = 0x3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723
    order = 0xAADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069
    prime = 0xAADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3
    aliases = ("1.3.36.3.3.2.8.1.1.13", )

    @classmethod
    def generator(cls):
        return cls(
            0x81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822,
            0x7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892
        )
